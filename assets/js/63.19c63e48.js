(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{441:function(t,s,n){"use strict";n.r(s);var a=n(24),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"简述【执行上下文】下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简述【执行上下文】下","aria-hidden":"true"}},[t._v("#")]),t._v(" 简述【执行上下文】下")]),t._v(" "),n("p",[t._v("上一篇我们讲到在全局环境下的代码段中，执行上下文环境中有如何数据：")]),t._v(" "),n("ul",[n("li",[t._v("变量、函数表达式——变量声明，默认赋值为"),n("code",[t._v("undefined")]),t._v("；")]),t._v(" "),n("li",[n("code",[t._v("this")]),t._v("——赋值；")]),t._v(" "),n("li",[t._v("函数声明——赋值；")])]),t._v(" "),n("p",[t._v("如果在函数中，除了以上数据之外，还会有其他数据。先看以下代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[10]")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("以上代码展示了在函数体的语句执行之前，"),n("code",[t._v("arguments")]),t._v("变量和函数的参数都已经被赋值。从这里可以看出，函数每被调用一次，都会产生一个新的执行上下文环境。因为不同的调用可能就会有不同的参数。")]),t._v(" "),n("p",[t._v('另外一点不同在于，函数在定义的时候（不是调用的时候），就已经确定了函数体内部自由变量的作用域。至于"自由变量"和"作用域"是后面要专门拿出来讲述的重点，这里就先点到为止。用一个例子说明一下：')]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a是自由变量 函数创建时就确定了a要取值的作用域")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("好了，总结完了函数的附加内容，我们就此要全面总结一下上下文环境的数据内容。")]),t._v(" "),n("p",[t._v("全局代码的上下文环境数据内容为：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th"),t._v(" "),n("th")])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("普通变量（包括函数表达式），"),n("br"),t._v(" 如： var a = 10;")]),t._v(" "),n("td",[t._v("声明（默认赋值为undefined）")])]),t._v(" "),n("tr",[n("td",[t._v("函数声明，"),n("br"),t._v("如： function fn() { }")]),t._v(" "),n("td",[t._v("赋值")])]),t._v(" "),n("tr",[n("td",[t._v("this")]),t._v(" "),n("td",[t._v("赋值")])])])]),t._v(" "),n("p",[t._v("如果代码段是函数体，那么在此基础上需要附加：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th"),t._v(" "),n("th")])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("参数")]),t._v(" "),n("td",[t._v("赋值")])]),t._v(" "),n("tr",[n("td",[t._v("arguments")]),t._v(" "),n("td",[t._v("赋值")])]),t._v(" "),n("tr",[n("td",[t._v("自由变量的取值作用域")]),t._v(" "),n("td",[t._v("赋值")])])])]),t._v(" "),n("p",[t._v("给执行上下文环境下一个通俗的定义——在执行代码之前，把将要用到的所有的变量都事先拿出来，有的直接赋值了，有的先用``undefined`占个空。")]),t._v(" "),n("p",[t._v("了解了执行上下文环境中的数据信息，你就不用再去死记硬背那些可恶的面试题了。理解了就不用背诵！")]),t._v(" "),n("p",[t._v("讲完了上下文环境，又来了新的问题——在执行"),n("code",[t._v("js")]),t._v('代码时，会有数不清的函数调用次数，会产生许多个上下文环境。这么多上下文环境该如何管理，以及如何销毁而释放内存呢？下一节将通过"执行上下文栈"来解释这个问题。')]),t._v(" "),n("p",[t._v('不过别着急，在解释"执行上下文栈"之前，还需要把'),n("code",[t._v("this")]),t._v("说一下，"),n("code",[t._v("this")]),t._v("还是挺重要的。")]),t._v(" "),n("p",[t._v("说完"),n("code",[t._v("this")]),t._v("，接着说执行上下文栈。")])])},[],!1,null,null,null);e.options.__file="closure-9.md";s.default=e.exports}}]);